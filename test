pragma solidity ^0.8.0;

contract PrisonersDilemma {
    address public player1;
    address public player2;
    uint public player1Score;
    uint public player2Score;
    bool public gameStarted;
    bool public gameEnded;
    
    constructor(address _player1, address _player2) {
        player1 = _player1;
        player2 = _player2;
    }
    
    function play(uint player1Choice, uint player2Choice) public {
        require(msg.sender == player1 || msg.sender == player2, "You are not a player in this game.");
        require(gameStarted == true, "The game has not started yet.");
        require(gameEnded == false, "The game has already ended.");
        
        if (msg.sender == player1) {
            player1Score += getScore(player1Choice, player2Choice)[0];
        } else {
            player2Score += getScore(player2Choice, player1Choice)[1];
        }
        
        if (player1Score >= 2 || player2Score >= 2) {
            gameEnded = true;
        }
    }
    
    function startGame() public {
        require(msg.sender == player1, "Only player1 can start the game.");
        require(gameStarted == false, "The game has already started.");
        gameStarted = true;
    }
    
    function getScore(uint myChoice, uint otherChoice) private pure returns (uint[2] memory) {
        if (myChoice == 1 && otherChoice == 1) {
            return [0, 0];
        } else if (myChoice == 1 && otherChoice == 0) {
            return [3, 1];
        } else if (myChoice == 0 && otherChoice == 1) {
            return [1, 3];
        } else {
            return [2, 2];
        }
    }
    
    function getWinner() public view returns (address) {
        require(gameEnded == true, "The game has not ended yet.");
        
        if (player1Score >= 2) {
            return player1;
        } else {
            return player2;
        }
    }
}
